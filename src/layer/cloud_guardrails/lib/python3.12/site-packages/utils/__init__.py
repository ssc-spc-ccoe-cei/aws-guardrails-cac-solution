import logging

logger = logging.getLogger()
logger.setLevel(logging.INFO)


def is_scheduled_notification(message_type: str) -> bool:
    """
    Check whether the message is a ScheduledNotification or not.

    Keyword arguments:

    message_type -- the message type
    """
    return message_type == "ScheduledNotification"


def check_required_parameters(rule_parameters: dict, param_names: list[str]):
    """
    Raise a ValueError for missing or falsy values in the rule_parameters.

    Keyword arguments:

    rule_parameters -- the Key/Value dictionary of the Config Rules parameters

    param_names -- the list of required parameter names

    logger -- the logger object
    """
    for param in param_names:
        if param not in rule_parameters:
            logger.error(f"The parameter '{param}' must be defined.")
            raise ValueError(f"The parameter '{param}' must be defined.")
        if not rule_parameters[param]:
            logger.error(f"The parameter '{param}' must have a defined value.")
            raise ValueError(f"The parameter '{param}' must have a defined value.")
    return rule_parameters


def flat(list):
    """Flatten a list of lists (only flattens to depth 1, all items must be lists)"""
    return [x for sub_list in list for x in sub_list]


def flatten_dict(d: dict, parent_key: str = "", sep: str = "."):
    items = []
    for k, v in d.items():
        new_key = f"{parent_key}{sep}{k}" if parent_key else k
        if isinstance(v, dict):
            items.extend(flatten_dict(v, new_key, sep=sep).items())
        else:
            items.append((new_key, v))
    return dict(items)
