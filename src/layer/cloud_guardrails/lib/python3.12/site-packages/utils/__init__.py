import logging
import os
from enum import Enum

logger = logging.getLogger()
logger.setLevel(logging.INFO)    

class GuardrailType(Enum):
    Guardrail1 = "Protect_User_Accounts_And_Identities"
    Guardrail2 = "Manage_Access"
    Guardrail3 = "Secure_Endpoints"
    Guardrail4 = "Enterprise_Monitoring_Accounts"
    Guardrail5 = "Data_Locations"
    Guardrail6 = "Protection_Of_Data_At_Rest"
    Guardrail7 = "Protection_Of_Data_In_Transit"
    Guardrail8 = "Segment_And_Separate"
    Guardrail9 = "Network_Security_Services"
    Guardrail10 = "Cyber_Defense_Services"
    Guardrail11 = "Logging_And_Monitoring"
    Guardrail12 = "Configuration_Of_Cloud_Marketplace"
    Guardrail13 = "Plan_For_Continuity"
    
class CloudProfileType(Enum):
    Profile1 = "1"
    Profile2 = "2"
    Profile3 = "3"
    Profile4 = "4"
    Profile5 = "5"
    Profile6 = "6"
    
class GuardrailRequirementType(Enum):
    Required = "Required"
    Recommended = "Recommended"
    Not_Required = "Not_Applicable"

class UtilLibraryError(Exception):
    pass

class GuardrailMissingProfileLevelRequirementType(UtilLibraryError):
    pass


def is_scheduled_notification(message_type: str) -> bool:
    """
    Check whether the message is a ScheduledNotification or not.

    Keyword arguments:

    message_type -- the message type
    """
    return message_type == "ScheduledNotification"


def check_required_parameters(rule_parameters: dict, param_names: list[str]):
    """
    Raise a ValueError for missing or falsy values in the rule_parameters.

    Keyword arguments:

    rule_parameters -- the Key/Value dictionary of the Config Rules parameters

    param_names -- the list of required parameter names

    logger -- the logger object
    """
    for param in param_names:
        if param not in rule_parameters:
            logger.error(f"The parameter '{param}' must be defined.")
            raise ValueError(f"The parameter '{param}' must be defined.")
        if not rule_parameters[param]:
            logger.error(f"The parameter '{param}' must have a defined value.")
            raise ValueError(f"The parameter '{param}' must have a defined value.")
    return rule_parameters


def flat(list):
    """Flatten a list of lists (only flattens to depth 1, all items must be lists)"""
    return [x for sub_list in list for x in sub_list]


def flatten_dict(d: dict, parent_key: str = "", sep: str = "."):
    items = []
    for k, v in d.items():
        new_key = f"{parent_key}{sep}{k}" if parent_key else k
        if isinstance(v, dict):
            items.extend(flatten_dict(v, new_key, sep=sep).items())
        else:
            items.append((new_key, v))
    return dict(items)

def check_guardrail_requirement_by_cloud_usage_profile(guardrail: GuardrailType, account_cloud_profile: CloudProfileType) -> GuardrailRequirementType:        
    guardrails_required_by_cloud_profile = {
        CloudProfileType.Profile1: [GuardrailType.Guardrail1, GuardrailType.Guardrail2, GuardrailType.Guardrail4, GuardrailType.Guardrail8, GuardrailType.Guardrail12],
        CloudProfileType.Profile2: [GuardrailType.Guardrail1, GuardrailType.Guardrail2, GuardrailType.Guardrail3, GuardrailType.Guardrail4, GuardrailType.Guardrail7, GuardrailType.Guardrail8, GuardrailType.Guardrail9, GuardrailType.Guardrail10, GuardrailType.Guardrail11, GuardrailType.Guardrail12, GuardrailType.Guardrail13],
        CloudProfileType.Profile3: [GuardrailType.Guardrail1, GuardrailType.Guardrail2, GuardrailType.Guardrail3, GuardrailType.Guardrail4, GuardrailType.Guardrail5, GuardrailType.Guardrail6, GuardrailType.Guardrail7, GuardrailType.Guardrail8, GuardrailType.Guardrail9, GuardrailType.Guardrail10, GuardrailType.Guardrail11, GuardrailType.Guardrail12, GuardrailType.Guardrail13],
        CloudProfileType.Profile4: [GuardrailType.Guardrail1, GuardrailType.Guardrail2, GuardrailType.Guardrail3, GuardrailType.Guardrail4, GuardrailType.Guardrail5, GuardrailType.Guardrail6, GuardrailType.Guardrail7, GuardrailType.Guardrail8, GuardrailType.Guardrail9, GuardrailType.Guardrail10, GuardrailType.Guardrail11, GuardrailType.Guardrail12, GuardrailType.Guardrail13],
        CloudProfileType.Profile5: [GuardrailType.Guardrail1, GuardrailType.Guardrail2, GuardrailType.Guardrail3, GuardrailType.Guardrail4, GuardrailType.Guardrail5, GuardrailType.Guardrail6, GuardrailType.Guardrail7, GuardrailType.Guardrail8, GuardrailType.Guardrail9, GuardrailType.Guardrail10, GuardrailType.Guardrail11, GuardrailType.Guardrail12, GuardrailType.Guardrail13],
        CloudProfileType.Profile6: [GuardrailType.Guardrail1, GuardrailType.Guardrail2, GuardrailType.Guardrail3, GuardrailType.Guardrail4, GuardrailType.Guardrail5, GuardrailType.Guardrail6, GuardrailType.Guardrail7, GuardrailType.Guardrail8, GuardrailType.Guardrail9, GuardrailType.Guardrail10, GuardrailType.Guardrail11, GuardrailType.Guardrail12, GuardrailType.Guardrail13],
    }

    guardrails_recommended_by_cloud_profile = {
        CloudProfileType.Profile1: [GuardrailType.Guardrail3, GuardrailType.Guardrail5, GuardrailType.Guardrail7, GuardrailType.Guardrail9, GuardrailType.Guardrail11],
        CloudProfileType.Profile2: [GuardrailType.Guardrail5, GuardrailType.Guardrail6]
    }
    
    guardrails_not_required_by_cloud_profile = {
        CloudProfileType.Profile1: [GuardrailType.Guardrail6, GuardrailType.Guardrail10, GuardrailType.Guardrail13]
    }
    
    if  guardrail in guardrails_required_by_cloud_profile.get(account_cloud_profile, []):
        return GuardrailRequirementType.Required
    elif guardrail in guardrails_recommended_by_cloud_profile.get(account_cloud_profile, []):
        return GuardrailRequirementType.Recommended
    elif guardrail in guardrails_not_required_by_cloud_profile.get(account_cloud_profile, []):
        return GuardrailRequirementType.Not_Required
    else:
        raise GuardrailMissingProfileLevelRequirementType

def get_cloud_profile_from_tags(tags: list[dict]) -> CloudProfileType:
    tagKey = "CloudProfile"
    default = CloudProfileType.Profile3
    try:
        default = CloudProfileType(os.environ.get("DEFAULT_CLOUD_PROFILE", CloudProfileType.Profile3))
    except:
        logger.info("Failed to cast environment variable 'DEFAULT_CLOUD_PROFILE', invalid CloudProfileType. Using Cloud Profile 6 as default.")
        
    for t in tags:
        if t.get("Key", "") == tagKey:
            logger.info(f"Account cloud profile found: '{t.get("Value")}'")
            try:
                return CloudProfileType(t.get("Value"))
            except:
                logger.info(f"Failed to cast tag '{tagKey}', invalid CloudProfileType. Returning default '{default}'")
                return CloudProfileType(default)
    
    logger.info(f"No tag with key '{tagKey}' found. Returning default '{default}'")
    return default
