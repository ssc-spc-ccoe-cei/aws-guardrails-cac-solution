import logging
import time

import botocore.exceptions

logger = logging.getLogger()
logger.setLevel(logging.INFO)


def list_all_sns_subscriptions_by_topic(sns_client, topic_arn: str, interval_between_calls: float = 0.05) -> list[dict]:
    try:
        args = {"TopicArn": topic_arn}
        resources = []

        while True:
            response = sns_client.list_subscriptions_by_topic(**args)

            if response:
                resources.extend(response.get("Subscriptions", []))
                args["NextToken"] = response.get("NextToken")
            else:
                args["NextToken"] = None

            if not args.get("NextToken"):
                break
            else:
                time.sleep(interval_between_calls)

        return resources

    except botocore.exceptions.ClientError as ex:
        if "NotFound" in ex.response["Error"]["Code"]:
            ex.response["Error"]["Message"] = "Failed to get topic subscriptions. Resource not found."
        elif "InvalidParameter" in ex.response["Error"]["Code"]:
            ex.response["Error"]["Message"] = "Failed to get topic subscriptions. Invalid parameter."
        elif "AuthorizationError" in ex.response["Error"]["Code"]:
            ex.response["Error"]["Message"] = "Failed to get topic subscriptions. User is unauthorized."
        else:
            ex.response["Error"]["Message"] = "InternalError"
            ex.response["Error"]["Code"] = "InternalError"
        raise ex


def list_all_sns_topics(sns_client, interval_between_calls: float = 0.05):
    resources: list[dict] = []
    paginator = sns_client.get_paginator("list_topics")
    page_iterator = paginator.paginate()
    for page in page_iterator:
        resources.extend(page.get("Topics", []))
        time.sleep(interval_between_calls)
    return resources
