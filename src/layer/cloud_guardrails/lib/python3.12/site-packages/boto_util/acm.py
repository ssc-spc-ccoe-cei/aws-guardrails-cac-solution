import logging
import time

import botocore.exceptions

logger = logging.getLogger()
logger.setLevel(logging.INFO)


def list_all_acm_certificates(acm_client, page_size: int = 100, interval_between_calls: float = 0.05) -> list[dict]:
    """
    Get a list of all the AWS Certificate Manager Certificates
    https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/acm/paginator/ListCertificates.html
    """
    resources: list[dict] = []
    paginator = acm_client.get_paginator("list_certificates")
    # Override the default 'keyTypes' so that we get all the types
    page_iterator = paginator.paginate(Includes={"keyTypes": []}, PaginationConfig={"PageSize": page_size})
    for page in page_iterator:
        resources.extend(page.get("CertificateSummaryList", []))
        time.sleep(interval_between_calls)
    return resources


def describe_acm_certificate(acm_client, certificate_arn: str) -> dict | None:
    try:
        response: dict | None = acm_client.describe_certificate(CertificateArn=certificate_arn)
        return None if not response else response.get("Certificate", None)
    except botocore.exceptions.ClientError as ex:
        # Scrub error message for any internal account info leaks
        if "AccessDenied" in ex.response["Error"]["Code"]:
            ex.response["Error"]["Message"] = "AWS Config does not have permission to assume the IAM role."
        elif "ResourceNotFound" in ex.response["Error"]["Code"]:
            ex.response["Error"]["Message"] = "ResourceNotFound Error calling 'describe_certificate'"
        elif "InvalidArn" in ex.response["Error"]["Code"]:
            ex.response["Error"]["Message"] = "InvalidArn Error calling 'describe_certificate'"
        else:
            ex.response["Error"]["Message"] = "InternalError"
            ex.response["Error"]["Code"] = "InternalError"
        raise ex
