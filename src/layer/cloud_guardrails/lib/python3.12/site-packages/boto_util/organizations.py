import logging
import time

import botocore.exceptions

logger = logging.getLogger()
logger.setLevel(logging.INFO)


def get_organizations_mgmt_account_id(organizations_client):
    """Calls the AWS Organizations API to obtain the Management Account ID"""
    management_account_id = ""
    i_retry_limit = 10
    i_retries = 0
    b_completed = False
    b_retry = True
    while (b_retry and (not b_completed)) and (i_retries < i_retry_limit):
        try:
            response = organizations_client.describe_organization()
            if response:
                organization = response.get("Organization", None)
                if organization:
                    management_account_id = organization.get("MasterAccountId", "")
                else:
                    logger.error("Unable to read the Organization from the dict")
            else:
                logger.error("Invalid response.")
            b_completed = True
        except botocore.exceptions.ClientError as ex:
            if "AccessDenied" in ex.response["Error"]["Code"]:
                logger.error("ACCESS DENIED when trying to describe_organization")
                management_account_id = "ERROR"
                b_retry = False
            elif "AWSOrganizationsNotInUse" in ex.response["Error"]["Code"]:
                logger.error("AWS Organizations not in use")
                management_account_id = "ERROR"
                b_retry = False
            elif "ServiceException" in ex.response["Error"]["Code"]:
                logger.error("AWS Organizations Service Exception")
                management_account_id = "ERROR"
                b_retry = False
            elif ("ConcurrentModification" in ex.response["Error"]["Code"]) or (
                "TooManyRequests" in ex.response["Error"]["Code"]
            ):
                # throttling
                logger.info("AWS Organizations API is throttling requests or going through a modification. Will retry.")
                time.sleep(2)
                if i_retries >= i_retry_limit:
                    logger.error("Retry limit reached. Returning an error")
                    management_account_id = "ERROR"
                    b_retry = False
                else:
                    i_retries += 1
        except ValueError:
            logger.error("Unknown exception - get_organizations_mgmt_account_id.")
            management_account_id = "ERROR"
    return management_account_id


def organizations_list_all_service_control_policies(
    organizations_client, interval_between_calls: float = 0.05
) -> list[dict]:
    """
    https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/organizations/paginator/ListPolicies.html
    """
    resources: list[dict] = []
    paginator = organizations_client.get_paginator("list_policies")
    page_iterator = paginator.paginate(Filter="SERVICE_CONTROL_POLICY")
    for page in page_iterator:
        resources.extend(page.get("Policies", []))
        time.sleep(interval_between_calls)
    return resources


def organizations_list_all_roots(organizations_client, interval_between_calls: float = 0.05) -> list[dict]:
    """
    https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/organizations/paginator/ListRoots.html
    """
    resources: list[dict] = []
    paginator = organizations_client.get_paginator("list_roots")
    page_iterator = paginator.paginate()
    for page in page_iterator:
        resources.extend(page.get("Roots", []))
        time.sleep(interval_between_calls)
    return resources


def organizations_list_all_organizational_units(
    organizations_client, parent_id: str | None = None, interval_between_calls: float = 0.05
) -> list[dict]:
    """
    https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/organizations/paginator/ListOrganizationalUnitsForParent.html
    """
    resources: list[dict] = []
    if not parent_id:
        roots = organizations_list_all_roots(organizations_client, interval_between_calls)
        for root in roots:
            resources.extend(
                organizations_list_all_organizational_units(
                    organizations_client, root.get("Id"), interval_between_calls
                )
            )
        return resources

    paginator = organizations_client.get_paginator("list_organizational_units_for_parent")
    page_iterator = paginator.paginate(ParentId=parent_id)
    for page in page_iterator:
        batch = page.get("OrganizationalUnits", [])
        resources.extend(batch)
        time.sleep(interval_between_calls)
        for ou in batch:
            resources.extend(
                organizations_list_all_organizational_units(organizations_client, ou.get("Id"), interval_between_calls)
            )
    return resources


def organizations_list_all_targets_for_policy(
    organizations_client, policy_id: str, page_size: int = 10, interval_between_calls: int = 0.1
):
    """
    https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/organizations/paginator/ListTargetsForPolicy.html
    """
    resources: list[dict] = []
    paginator = organizations_client.get_paginator("list_targets_for_policy")
    page_iterator = paginator.paginate(PolicyId=policy_id, PaginationConfig={"PageSize": page_size})
    for page in page_iterator:
        resources.extend(page.get("Targets", []))
        time.sleep(interval_between_calls)
    return resources


def organizations_list_all_policies_for_target(
    organizations_client, target_id: str, page_size: int = 10, interval_between_calls: int = 0.1
):
    """
    https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/organizations/paginator/ListPoliciesForTarget.html
    """
    resources: list[dict] = []
    paginator = organizations_client.get_paginator("list_policies_for_target")
    page_iterator = paginator.paginate(
        TargetId=target_id, Filter="SERVICE_CONTROL_POLICY", PaginationConfig={"PageSize": page_size}
    )
    for page in page_iterator:
        resources.extend(page.get("Policies", []))
        time.sleep(interval_between_calls)
    return resources


def organizations_list_all_accounts(organizations_client, interval_between_calls: float = 0.05) -> list[dict]:
    """
    https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/organizations/paginator/ListAccounts.html
    """
    resources: list[dict] = []
    paginator = organizations_client.get_paginator("list_accounts")
    page_iterator = paginator.paginate()
    for page in page_iterator:
        resources.extend(page.get("Accounts", []))
        time.sleep(interval_between_calls)
    return resources
