import logging
import time

import botocore.exceptions


logger = logging.getLogger()
logger.setLevel(logging.INFO)


def describe_elb_load_balancer_policies(elb_client, load_balancer_name: str, policy_names: list[str]) -> list[dict]:
    try:
        response = elb_client.describe_load_balancer_policies(
            LoadBalancerName=load_balancer_name, PolicyNames=policy_names
        )
        return [] if not response else response.get("PolicyDescriptions", [])
    except botocore.exceptions.ClientError as ex:
        # Scrub error message for any internal account info leaks
        if "AccessDenied" in ex.response["Error"]["Code"]:
            ex.response["Error"]["Message"] = "AWS Config does not have permission to assume the IAM role."
        elif "AccessPointNotFound" in ex.response["Error"]["Code"]:
            ex.response["Error"]["Message"] = "AccessPointNotFound Error calling 'describe_load_balancer_policies'"
        elif "PolicyNotFound" in ex.response["Error"]["Code"]:
            ex.response["Error"]["Message"] = "PolicyNotFound Error calling 'describe_load_balancer_policies'"
        else:
            ex.response["Error"]["Message"] = "InternalError"
            ex.response["Error"]["Code"] = "InternalError"
        raise ex


def describe_all_elb_load_balancers(
    elb_client, page_size: int = 400, interval_between_calls: float = 0.1
) -> list[dict]:
    """
    Get a list of all the Classic Load Balancers
    https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/elb/paginator/DescribeLoadBalancers.html
    """
    resources: list[dict] = []
    paginator = elb_client.get_paginator("describe_load_balancers")
    page_iterator = paginator.paginate(PaginationConfig={"PageSize": page_size})
    for page in page_iterator:
        resources.extend(page.get("LoadBalancerDescriptions", []))
        time.sleep(interval_between_calls)
    return resources
