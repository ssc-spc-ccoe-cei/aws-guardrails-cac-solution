import logging
import time

import botocore.exceptions

logger = logging.getLogger()
logger.setLevel(logging.INFO)


def get_iam_user(iam_client, user_name: str) -> dict | None:
    try:
        response = iam_client.get_user(UserName=user_name)
        user = response.get("User")
        return {
            "UserName": user.get("UserName"),
            "UserId": user.get("UserId"),
            "Arn": user.get("Arn"),
            "PasswordLastUsed": user.get("PasswordLastUsed", None),
        }
    except botocore.exceptions.ClientError as ex:
        # Scrub error message for any internal account info leaks
        if "NoSuchEntity" in ex.response["Error"]["Code"]:
            return None
        elif "AccessDenied" in ex.response["Error"]["Code"]:
            ex.response["Error"]["Message"] = "AWS Config does not have permission to assume the IAM role."
        elif "ServiceFailure" in ex.response["Error"]["Code"]:
            ex.response["Error"]["Message"] = "AWS IAM service failure."
        else:
            ex.response["Error"]["Message"] = "InternalError"
            ex.response["Error"]["Code"] = "InternalError"
        logger.error("ERROR getting iam user. %s", ex.response["Error"])
        raise ex


def account_has_federated_users(iam_client) -> bool:
    response = iam_client.list_open_id_connect_providers()
    if not response:
        raise Exception("Request to list OIDC providers returned an invalid response")
    providers = response.get("OpenIDConnectProviderList", [])
    if providers:
        return True

    response = iam_client.list_saml_providers()
    if not response:
        raise Exception("Request to list SAML providers returned an invalid response")
    providers = response.get("SAMLProviderList", [])
    if providers:
        return True

    return False


def list_all_iam_users(iam_client, interval_between_calls: float = 0.05) -> list[dict]:
    try:
        args = {}
        resources = []

        while True:
            response = iam_client.list_users(**args)

            if response:
                resources.extend(response.get("Users", []))
                args["Marker"] = response.get("Marker")
            else:
                args["Marker"] = None

            if not args.get("Marker"):
                break
            else:
                time.sleep(interval_between_calls)

        return resources

    except botocore.exceptions.ClientError as ex:
        if "ServiceFailure" in ex.response["Error"]["Code"]:
            ex.response["Error"]["Message"] = "Failed to list iam users due to an IAM Service failure error."
        else:
            ex.response["Error"]["Message"] = "InternalError"
            ex.response["Error"]["Code"] = "InternalError"
        raise ex


def list_all_iam_groups(iam_client, interval_between_calls: float = 0.05) -> list[dict]:
    try:
        args = {}
        resources = []

        while True:
            response = iam_client.list_groups(**args)

            if response:
                resources.extend(response.get("Groups", []))
                args["Marker"] = response.get("Marker")
            else:
                args["Marker"] = None

            if not args.get("Marker"):
                break
            else:
                time.sleep(interval_between_calls)

        return resources

    except botocore.exceptions.ClientError as ex:
        if "ServiceFailure" in ex.response["Error"]["Code"]:
            ex.response["Error"]["Message"] = "Failed to list iam users due to an IAM Service failure error."
        else:
            ex.response["Error"]["Message"] = "InternalError"
            ex.response["Error"]["Code"] = "InternalError"
        raise ex


def list_all_iam_attached_group_policies(
    iam_client, group_name: str, interval_between_calls: float = 0.05
) -> list[dict]:
    try:
        args = {"GroupName": group_name}
        resources = []

        while True:
            response = iam_client.list_attached_group_policies(**args)

            if response:
                resources.extend(response.get("AttachedPolicies", []))
                args["Marker"] = response.get("Marker")
            else:
                args["Marker"] = None

            if not args.get("Marker"):
                break
            else:
                time.sleep(interval_between_calls)

        return resources

    except botocore.exceptions.ClientError as ex:
        if "NoSuchEntity" in ex.response["Error"]["Code"]:
            ex.response["Error"][
                "Message"
            ] = f"Unable to fetch policies for group '{group_name}'. No such entity found."
        elif "InvalidInput" in ex.response["Error"]["Code"]:
            ex.response["Error"]["Message"] = f"Invalid group name '{group_name}' or marker input received."
        elif "ServiceFailure" in ex.response["Error"]["Code"]:
            ex.response["Error"][
                "Message"
            ] = f"Unable to fetch policies for group '{group_name}' due to an IAM Service failure error."
        else:
            ex.response["Error"]["Message"] = "InternalError"
            ex.response["Error"]["Code"] = "InternalError"
        raise ex


def get_all_iam_group_members(iam_client, group_name: str, interval_between_calls: float = 0.05) -> list[dict]:
    try:
        args = {"GroupName": group_name}
        resources = []

        while True:
            response = iam_client.get_group(**args)

            if response:
                resources.extend(response.get("Users", []))
                args["Marker"] = response.get("Marker")
            else:
                args["Marker"] = None

            if not args.get("Marker"):
                break
            else:
                time.sleep(interval_between_calls)

        return resources

    except botocore.exceptions.ClientError as ex:
        if "NoSuchEntity" in ex.response["Error"]["Code"]:
            ex.response["Error"][
                "Message"
            ] = f"Unable to fetch policies for group '{group_name}'. No such entity found."
        elif "ServiceFailure" in ex.response["Error"]["Code"]:
            ex.response["Error"][
                "Message"
            ] = f"Unable to fetch policies for group '{group_name}' due to an IAM Service failure error."
        else:
            ex.response["Error"]["Message"] = "InternalError"
            ex.response["Error"]["Code"] = "InternalError"
        raise ex


def list_all_iam_roles(iam_client, page_size: int = 100, interval_between_calls: float = 0.1) -> list[dict]:
    """
    https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/iam/paginator/ListRoles.html
    """
    resources: list[dict] = []
    paginator = iam_client.get_paginator("list_roles")
    page_iterator = paginator.paginate(PaginationConfig={"PageSize": page_size})
    for page in page_iterator:
        resources.extend(page.get("Roles", []))
        time.sleep(interval_between_calls)
    return resources
