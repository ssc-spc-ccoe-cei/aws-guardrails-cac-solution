    """
    evaluation = {
        "ComplianceResourceId": resource_id,
        "ComplianceResourceType": resource_type,
        "ComplianceType": compliance_type,
        "OrderingTimestamp": str(json.loads(event["invokingEvent"])["notificationCreationTime"]),
    }
import logging


def is_scheduled_notification(message_type: str) -> bool:
    """
    Check whether the message is a ScheduledNotification or not.

    Keyword arguments:

    message_type -- the message type
    """
    return message_type == "ScheduledNotification"


def build_evaluation(
    resource_id: str,
    compliance_type: str,
    event: dict,
    resource_type: str = "AWS::::Account",
    annotation: str | None = None,
) -> dict:
    """
    Form an evaluation as a dictionary. Usually suited to report on scheduled rules.

    Keyword arguments:

        resource_id -- the unique id of the resource to report

        compliance_type -- either COMPLIANT, NON_COMPLIANT or NOT_APPLICABLE

        event -- the event variable given in the lambda handler

        resource_type -- the CloudFormation resource type to report on the rule (default AWS::::Account)

        annotation -- an annotation to be added to the evaluation (default None)
    """
    evaluation = {
        "ComplianceResourceId": resource_id,
        "ComplianceResourceType": resource_type,
        "ComplianceType": compliance_type,
        "OrderingTimestamp": str(json.loads(event["invokingEvent"])["notificationCreationTime"]),
    }

    if annotation:
        evaluation["Annotation"] = annotation

    return evaluation


def check_required_parameters(rule_parameters: dict, param_names: list[str], logger: logging.Logger):
    """
    Raise a ValueError for missing or falsy values in the rule_parameters.

    Keyword arguments:

    rule_parameters -- the Key/Value dictionary of the Config Rules parameters

    param_names -- the list of required parameter names

    logger -- the logger object
    """
    for param in param_names:
        if param not in rule_parameters:
            logger.error(f"The parameter '{param}' must be defined.")
            raise ValueError(f"The parameter '{param}' must be defined.")
        if not rule_parameters[param]:
            logger.error(f"The parameter '{param}' must have a defined value.")
            raise ValueError(f"The parameter '{param}' must have a defined value.")
    return rule_parameters
