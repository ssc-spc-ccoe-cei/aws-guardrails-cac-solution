import json
import time

import botocore.exceptions


def build_evaluation(
    resource_id: str,
    compliance_type: str,
    event: dict,
    resource_type: str = "AWS::::Account",
    annotation: str | None = None,
) -> dict:
    """
    Form an evaluation as a dictionary. Usually suited to report on scheduled rules.

    Keyword arguments:

        resource_id -- the unique id of the resource to report

        compliance_type -- either COMPLIANT, NON_COMPLIANT or NOT_APPLICABLE

        event -- the event variable given in the lambda handler

        resource_type -- the CloudFormation resource type to report on the rule (default AWS::::Account)

        annotation -- an annotation to be added to the evaluation (default None)
    """
    evaluation = {
        "ComplianceResourceId": resource_id,
        "ComplianceResourceType": resource_type,
        "ComplianceType": compliance_type,
        "OrderingTimestamp": str(json.loads(event["invokingEvent"])["notificationCreationTime"]),
    }

    if annotation:
        evaluation["Annotation"] = annotation

    return evaluation


def submit_evaluations(config_client, result_token: str, evaluations: list[dict], interval_between_calls: float = 0.1):
    """
    Submit the list of evaluations to AWS Config Service in batches.
    https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/config/client/put_evaluations.html

    Keyword arguments:

    config_client -- The aws client for the 'config' service

    result_token -- An encrypted token that associates an evaluation with an Config rule. Identifies the rule and the event that triggered the evaluation.

    evaluations -- A list of evaluations

    interval_between_calls -- A time to wait between batches of submissions, used to prevent API throttling
    """

    # The maximum amount of evaluations that the API allows to be submitted in one request is 100
    evaluations_per_request = 100

    try:
        while evaluations:
            batch_of_evaluations, evaluations = (
                evaluations[:evaluations_per_request],
                evaluations[evaluations_per_request:],
            )
            config_client.put_evaluations(Evaluations=batch_of_evaluations, ResultToken=result_token)
            if evaluations:
                time.sleep(interval_between_calls)

    except botocore.exceptions.ClientError as ex:
        # Scrub error message for any internal account info leaks
        if "AccessDenied" in ex.response["Error"]["Code"]:
            ex.response["Error"]["Message"] = "AWS Config does not have permission to assume the IAM role."
        elif "InvalidParameterValue" in ex.response["Error"]["Code"]:
            ex.response["Error"]["Message"] = "InvalidParameterValue when calling put_evaluations"
        elif "InvalidResultToken" in ex.response["Error"]["Code"]:
            ex.response["Error"]["Message"] = "InvalidResultToken when calling put_evaluations"
        elif "NoSuchConfigRule" in ex.response["Error"]["Code"]:
            ex.response["Error"]["Message"] = "NoSuchConfigRule when calling put_evaluations"
        else:
            ex.response["Error"]["Message"] = "InternalError"
            ex.response["Error"]["Code"] = "InternalError"
        raise ex
