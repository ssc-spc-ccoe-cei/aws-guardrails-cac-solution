import logging
import time

import botocore.exceptions

logger = logging.getLogger()
logger.setLevel(logging.INFO)


def list_all_cloud_trails(cloud_trail_client, interval_between_calls: float = 0.1) -> list[dict]:
    try:
        args = {}
        resources = []

        while True:
            response = cloud_trail_client.list_trails(**args)

            if response:
                resources.extend(response.get("Trails", []))
                args["NextToken"] = response.get("NextToken")
            else:
                args["NextToken"] = None

            if not args.get("NextToken"):
                break
            else:
                time.sleep(interval_between_calls)

        return resources

    except botocore.exceptions.ClientError as ex:
        if "UnsupportedOperation" in ex.response["Error"]["Code"]:
            ex.response["Error"]["Message"] = "list_trails operation not supported by CloudTrails."
        elif "OperationNotPermitted" in ex.response["Error"]["Code"]:
            ex.response["Error"]["Message"] = "list_trails operation not permitted."
        else:
            ex.response["Error"]["Message"] = "InternalError"
            ex.response["Error"]["Code"] = "InternalError"
        raise ex
