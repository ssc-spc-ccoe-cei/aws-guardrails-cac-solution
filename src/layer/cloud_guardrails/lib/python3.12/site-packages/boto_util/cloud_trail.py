import logging
import time

import botocore.exceptions

logger = logging.getLogger()
logger.setLevel(logging.INFO)


def list_all_cloud_trails(cloud_trail_client, interval_between_calls: float = 0.05) -> list[dict]:
    """
    https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/cloudtrail/paginator/ListTrails.html
    """
    resources: list[dict] = []
    paginator = cloud_trail_client.get_paginator("list_trails")
    page_iterator = paginator.paginate()
    for page in page_iterator:
        resources.extend(page.get("Trails", []))
        time.sleep(interval_between_calls)
    return resources


def trails_are_logging(cloud_trail_client, trails, interval_between_calls: float = 0.05):
    for t in trails:
        try:
            trail_arn = t.get("TrailARN")
            status = cloud_trail_client.get_trail_status(Name=trail_arn)
            if status.get("IsLogging", False):
                return False
            time.sleep(interval_between_calls)
        except botocore.exceptions.ClientError as ex:
            logger.error("Error while trying to fetch cloudtrail status.")
            logger.error(ex)
            raise ex
    return True


def lookup_cloud_trail_events(cloud_trail_client, lookup_attributes: list[dict] | None = None, interval_between_calls: float = 0.05) -> list[dict]:
    try:
        args = {}
        resources = []
        if lookup_attributes:
            args["LookupAttributes"] = lookup_attributes

        while True:
            response = cloud_trail_client.lookup_events(**args)

            if response:
                resources.extend(response.get("Events", []))
                args["NextToken"] = response.get("NextToken")
            else:
                args["NextToken"] = None

            if not args.get("NextToken"):
                break
            else:
                time.sleep(interval_between_calls)

        return resources

    except botocore.exceptions.ClientError as ex:
        if "InvalidLookupAttributes" in ex.response["Error"]["Code"]:
            ex.response["Error"]["Message"] = "Invalid lookup attributes provided."
        elif "InvalidTimeRange" in ex.response["Error"]["Code"]:
            ex.response["Error"]["Message"] = "Invalid time range provided."
        elif "InvalidMaxResults" in ex.response["Error"]["Code"]:
            ex.response["Error"]["Message"] = "Invalid max results value provided."
        elif "InvalidNextToken" in ex.response["Error"]["Code"]:
            ex.response["Error"]["Message"] = "Invalid next token provided."
        elif "InvalidEventCategory" in ex.response["Error"]["Code"]:
            ex.response["Error"]["Message"] = "Invalid event category provided."
        elif "UnsupportedOperation" in ex.response["Error"]["Code"]:
            ex.response["Error"]["Message"] = "lookup_events operation not supported by CloudTrails."
        elif "OperationNotPermitted" in ex.response["Error"]["Code"]:
            ex.response["Error"]["Message"] = "lookup_events operation not permitted."
        else:
            ex.response["Error"]["Message"] = "InternalError"
            ex.response["Error"]["Code"] = "InternalError"
        raise ex
