import logging
import time


logger = logging.getLogger()
logger.setLevel(logging.INFO)


def describe_all_rds_db_clusters(rds_client, page_size: int = 25, interval_between_calls: float = 0.05):
    resources: list[dict] = []
    paginator = rds_client.get_paginator("describe_db_clusters")
    page_iterator = paginator.paginate(MaxRecords=page_size)
    for page in page_iterator:
        resources.extend(page.get("DBClusters", []))
        time.sleep(interval_between_calls)
    return resources


def describe_all_rds_db_cluster_snapshots(rds_client, page_size: int = 25, interval_between_calls: float = 0.05):
    resources: list[dict] = []
    paginator = rds_client.get_paginator("describe_db_cluster_snapshots")
    page_iterator = paginator.paginate(MaxRecords=page_size)
    for page in page_iterator:
        resources.extend(page.get("DBClusterSnapshots", []))
        time.sleep(interval_between_calls)
    return resources


def describe_all_rds_db_instances(rds_client, page_size: int = 25, interval_between_calls: float = 0.05):
    resources: list[dict] = []
    paginator = rds_client.get_paginator("describe_db_instances")
    page_iterator = paginator.paginate(MaxRecords=page_size)
    for page in page_iterator:
        resources.extend(page.get("DBInstances", []))
        time.sleep(interval_between_calls)
    return resources


def describe_all_rds_db_snapshots(rds_client, page_size: int = 25, interval_between_calls: float = 0.05):
    resources: list[dict] = []
    paginator = rds_client.get_paginator("describe_db_snapshots")
    page_iterator = paginator.paginate(MaxRecords=page_size)
    for page in page_iterator:
        resources.extend(page.get("DBSnapshots", []))
        time.sleep(interval_between_calls)
    return resources
