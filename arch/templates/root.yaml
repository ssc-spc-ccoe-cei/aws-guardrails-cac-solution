AWSTemplateFormatVersion: 2010-09-09
Description: "Fed Client root resource cfn stack."

Parameters:
  ApiKey:
    Type: String
    Default: "*API_KEY*"
  ApiUrl:
    Type: String
    Default: "*API_URL*"
  Email:
    Type: String
    Default: "*CSPM_EMAIL*"
    Description: Subject to change, might not be used here
  OrganizationId:
    Type: String
    Default: "*ORG_ID*" 
    Description: Primary identifier for metadata of registered org
  InvokeUpdate:
    Type: String
    Default: '5'
  ExecutionName:
    Type: String
    Default: 'gc-fedclient-copy-execution-role'
  RootOUID:
    Type: String
    Default: 'r-bv5z'
  SecurityOUID:
    Type: String
    Default: '**SECURITY_OUID**'
  AuditAccountID:
    Type: String
    Default: '**AUDIT_ACCOUNT_ID**'
  OrganizationName:
    Type: String
    Default: 'SSC-Test'
  RolePrefix:
    Type: String
    Default: 'gc-'
    Description: >-
      The prefix to apply to generated role names, it is optional to set this
  AccelRolePrefix:
    Type: String
    Default: 'ASEA-'
    Description: >-
      The Accelerator role prefix for priveledged access, in ASEA or LZA deployed by Proservices this could be AWSA- 
  AcceleratorRole:
    Type: String
    Description: >-
      The role used to assume access to organizational accounts, in ASEA = ASEA-PipelineRole, LZA = OrganizationAccountAccessRole could also be PBMMAccel etc. This is not optional
    Default: 'ASEA-PipelineRole'
  PipelineBucket:
    Type: String
    Description: >-
      The deployment pipeline bucket holding child templates and packaged lambda code.
  DestBucketName:
    Type: String
    Default: "*GCDestBucketName*"
    Description: Bucket to which evidence will be shared
  DeployRoles:
    Type: String
    Default: true
    AllowedValues: [true, false]

Resources:  
  InvokeCustomLambdaApplyPolicyFunction:
    DependsOn: 
      - GuardRailsStack
      - ApplyPolicyFunction
    Type: Custom::InvokeCustomLambda
    Properties:
      Version: !Ref InvokeUpdate
      ServiceToken: !GetAtt ApplyPolicyFunction.Arn

  InvokeCustomLambdaRotateKeyFunction:
    DependsOn: 
      - InvokeCustomLambdaApplyPolicyFunction
    Type: Custom::InvokeCustomLambda
    Properties:
      Version: !Ref InvokeUpdate
      ServiceToken: !GetAtt RotateKeyFunction.Arn

  ##################
  # Lambda Functions
  ##################

  ApplyPolicyFunction:
    Type: 'AWS::Lambda::Function'
    Properties:
      Code:
        ZipFile: |
          import json
          import boto3
          import os
          import urllib.request
          import logging
          import cfnresponse

          logger = logging.getLogger()
          logger.setLevel(logging.INFO)
          
          org_id = os.environ.get('ORG_ID')
          execution_arn = os.environ.get('EXECUTION_ARN')
          api_key = os.environ.get('API_KEY')
          api_url = os.environ.get('API_URL')
          account_id = os.environ.get('ACCOUNT_ID')

          ROUTE = 'policy'
          
          def apply_policy():
            params = "?ExecutionArn="+execution_arn+'&AccountId='+org_id
            headers = {'x-api-key': str(api_key),'Accept':'*/*'}

            req = urllib.request.Request(api_url+ROUTE+params, headers=headers,method='POST')
            with urllib.request.urlopen(req) as response:
              if response.getcode() != 200:
                raise Exception("Execution role arn either doesnt exist or is blocked from being added.")
              return response.read().decode('utf-8')

          def lambda_handler(event, context):
            logger.info('got event {}'.format(event))
            if event.get('RequestType') == 'Create' or event.get('RequestType') == 'Update':
              try:
                response = apply_policy()
                logger.info('Sucessfully applied policy: {}'.format(response))
                cfnresponse.send(event, context, cfnresponse.SUCCESS, {})
              except Exception as e:
                logger.error(e,exc_info=True)
                cfnresponse.send(event, context, cfnresponse.FAILED, {})
            elif event.get('RequestType') == 'Delete':
              cfnresponse.send(event, context, cfnresponse.SUCCESS, {})
            else:
              cfnresponse.send(event, context, cfnresponse.FAILED, {})
      Handler: index.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Runtime: python3.9
      Environment:
        Variables:
          API_KEY: !Ref ApiKey
          API_URL: !Ref ApiUrl
          ORG_ID: !Ref OrganizationId
          EXECUTION_ARN: !Sub 'arn:aws:iam::${AuditAccountID}:role/${ExecutionName}${AWS::Region}'
          ACCOUNT_ID: !Sub '${AuditAccountID}'

  RotateKeyFunction:
    Type: 'AWS::Lambda::Function'
    Properties:
      Code:
        ZipFile: |
          import json
          import boto3
          import os
          import urllib.request
          import logging
          import cfnresponse

          logger = logging.getLogger()
          logger.setLevel(logging.INFO)
          
          org_id = os.environ.get('ORG_ID')
          account_id = os.environ.get('ACCOUNT_ID')
          api_key = os.environ.get('API_KEY')
          api_url = os.environ.get('API_URL')

          ROUTE = 'rotate'
          
          def rotate_key(org_id):
            params = "?id="+org_id
            headers = {'x-api-key': str(api_key),'Accept':'*/*'}

            req = urllib.request.Request(api_url+ROUTE+params, headers=headers)
            with urllib.request.urlopen(req) as response:
              if response.getcode() != 200:
                raise Exception("Failed to destroy api-key, notify an SSC administrator.")
              
          def lambda_handler(event, context):
            logger.info('got event {}'.format(event))
            if event.get('RequestType') == 'Create' or event.get('RequestType') == 'Update':
              try:
                rotate_key(org_id)
                logger.info('Rotated API key for account: {}'.format(account_id))
                cfnresponse.send(event, context, cfnresponse.SUCCESS, {})
              except Exception as e:
                logger.error(e,exc_info=True)
                cfnresponse.send(event, context, cfnresponse.FAILED, {})
            elif event.get('RequestType') == 'Delete':
              cfnresponse.send(event, context, cfnresponse.SUCCESS, {})
            else:
              cfnresponse.send(event, context, cfnresponse.FAILED, {})
      Handler: index.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Runtime: python3.9
      Environment:
        Variables:
          ORG_ID: !Ref OrganizationId
          ACCOUNT_ID: !Sub '${AWS::AccountId}'
          API_KEY: !Ref ApiKey
          API_URL: !Ref ApiUrl

  LambdaExecutionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: '/'
      Policies:
          - PolicyName: root
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: Allow
                  Action:
                    - logs:CreateLogGroup
                    - logs:CreateLogStream
                    - logs:PutLogEvents
                  Resource: arn:aws:logs:*:*:*
                
  GuardRailsStack:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Sub https://${PipelineBucket}.s3.${AWS::Region}.amazonaws.com/main.yaml
      Parameters:
        ExecutionName: !Ref ExecutionName
        OrganizationId: !Ref OrganizationId
        OrganizationName: !Ref OrganizationName
        RolePrefix: !Ref RolePrefix
        AccelRolePrefix: !Ref AccelRolePrefix
        AccleratorRole: !Ref AcceleratorRole
        SecurityOUID: !Ref SecurityOUID
        AuditAccountID: !Ref AuditAccountID
        RootOUID: !Ref RootOUID
        PipelineBucket: !Ref PipelineBucket
        DestBucketName: !Ref DestBucketName
        DeployRoles: !Ref DeployRoles