AWSTemplateFormatVersion: 2010-09-09
Description: AWS CloudFormation template to deploy the GC Guardrails Organizational Role Generator

Parameters:
  OrganizationName:
    Type: String
    Default: ""
    Description: The name of the organization. Used as a prefix in resource names.
  AuditAccountID:
    Type: String
    Description: >-
      The AWS Account ID (12 digits) of the Audit Account
  ClientEvidenceBucket:
    Type: String
    Description: >-
      The name of the Amazon S3 bucket to be created to store the required documents for assessment.
  AWSConfigConformsBucketName:
    Type: String
    Description: >-
      The name of the Amazon S3 bucket used for the conformance pack deployment .
  RolePrefix:
    Type: String
    Default: "ASEA-"
    Description: >-
      The prefix to apply to generated role names, in ASEA this is generally ASEA- for lza this could be cdk-accel etc
  AccelRolePrefix:
    Type: String
    Default: "AWSA-"
    Description: >-
      The Accelerator role prefix for priveledged access, in ASEA or LZA deployed by Proservices this could be AWSA- etc
  AccleratorRole:
    Type: String
    Description: >-
      The role used to assume access to organizational accounts, in ASEA = ASEA-PipelineRole, LZA = OrganizationAccountAccessRole could also be PBMMAccel etc.

Resources:
  LambdaCreateRole:
    Type: "AWS::IAM::Role"
    Properties:
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: "/"
      Policies:
        - PolicyName: assume_role
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - sts:AssumeRole
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: !Sub arn:aws:iam::*:role/${AccleratorRole}
              - Effect: Allow
                Action:
                  - "organizations:ListAccounts"
                Resource:
                  - "*"
  CreateRoleLambda:
    Type: "AWS::Lambda::Function"
    Properties:
      FunctionName: !Sub ${OrganizationName}aws_create_role
      Code: "../../src/lambda/aws_create_role/build/CreateRoleLambda/"
      Handler: app.lambda_handler
      Role: !GetAtt LambdaCreateRole.Arn
      Runtime: python3.10
      Timeout: 900

  EventBridgeCreateAccount:
    Type: AWS::Events::Rule
    Properties: 
      Description: !Sub ${OrganizationName}-New-Account-Role-Trigger
      EventPattern: 
            source: 
              - "aws.organizations"
            detail: 
              eventName:
                - "CreateAccountResult"
              eventSource:
                - "organizations.amazonaws.com"
              serviceEventDetails:
                createAccountResult:
                  state:
                    - SUCCEEDED
      State: "ENABLED"
      Targets: 
        - 
          Arn: !GetAtt CreateRoleLambda.Arn
          Id: "TargetFunctionV1"
          Input: !Sub |-
              {
                
                "Roles": [
                  {
                    "Name": "${AccelRolePrefix}GCLambdaExecutionRole2",
                    "TrustPrincipal": "arn:${AWS::Partition}:iam::${AuditAccountID}:root",
                    "SwitchRole": "${AccleratorRole}",
                    "PolicyPackage": {
                      "Docs": [{
                        "Version": "2012-10-17",
                        "Statement": [{
                          "Action": [
                            "apigateway:GET",
                            "apigateway:GET", 
                            "backup:ListBackupVaults",
                            "backup:ListRecoveryPointsByBackupVault",
                            "cassandra:Select",
                            "codebuild:BatchGetProjects",
                            "codebuild:ListProjects",
                            "config:PutEvaluations",
                            "docdb-elastic:ListClusterSnapshots",
                            "docdb-elastic:ListClusters",
                            "dynamodb:DescribeTable",
                            "dynamodb:ListTables",
                            "ec2:DescribeRegions",
                            "ec2:DescribeVolumes",
                            "ec2:GetEbsEncryptionByDefault",
                            "elasticache:DescribeCacheClusters",
                            "elasticache:DescribeSnapshots",
                            "elasticfilesystem:DescribeFileSystems",
                            "elasticloadbalancing:DescribeListeners",
                            "elasticloadbalancing:DescribeLoadBalancers",
                            "eks:DescribeCluster",
                            "eks:ListClusters",
                            "es:DescribeElasticsearchDomains",  
                            "es:ListDomainNames",
                            "kinesis:DescribeStream",
                            "kinesis:ListStreams",
                            "memorydb:DescribeClusters",
                            "memorydb:DescribeSnapshots",
                            "qldb:DescribeLedger",
                            "qldb:ListLedgers",
                            "rds:DescribeDBClusters",
                            "rds:DescribeDBClusterSnapshots",
                            "rds:DescribeDBInstances",
                            "rds:DescribeDBSnapshots",
                            "redshift:DescribeClusterParameters",
                            "redshift:DescribeClusters",
                            "resource-explorer-2:ListIndexes",
                            "resource-explorer-2:Search",
                            "s3:GetBucketLocation",
                            "s3:GetBucketPolicy",
                            "s3:GetEncryptionConfiguration",
                            "s3:ListAllMyBuckets",  
                            "s3:ListBucket",
                            "sns:GetTopicAttributes",
                            "sns:ListTopics",
                            "tag:GetResources",
                            "tag:GetResources",
                            "timestream:DescribeEndpoints",
                            "timestream:ListDatabases",
                            "timestream:ListTables",
                            "cloudtrail:DescribeTrails",
                            "cloudtrail:GetTrailStatus",
                            "cloudtrail:ListTrails",
                            "organizations:DescribeOrganization",
                            "organizations:ListAccounts"
                          ],
                          "Resource": [
                            "*"
                          ],
                          "Effect": "Allow",
                          "Sid": "GCComplianceAllowAccess2"
                        }]
                      }]
                    }
                  },
                  {
                    "Name": "${AccelRolePrefix}GCLambdaExecutionRole",
                    "TrustPrincipal": "arn:${AWS::Partition}:iam::${AuditAccountID}:root",
                    "SwitchRole": "${AccleratorRole}",
                    "PolicyPackage": {
                        "Docs": [{
                          "Version": "2012-10-17",
                            "Statement": [{
                              "Action": [
                                "config:PutEvaluations",
                                "cloudtrail:DescribeTrails",
                                "cloudtrail:GetTrailStatus",
                                "cloudtrail:ListTrails",
                                "apigateway:GET",
                                "backup:ListRecoveryPointsByBackupVault",
                                "backup:ListBackupVaults",
                                "cassandra:Select",
                                "codebuild:BatchGetProjects",
                                "codebuild:ListProjects",
                                "dax:DescribeClusters",
                                "dynamodb:DescribeTable",
                                "dynamodb:ListTables",
                                "docdb-elastic:ListClusters",
                                "docdb-elastic:ListClusterSnapshots",
                                "ec2:DescribeRegions",
                                "ec2:DescribeVolumes",
                                "ec2:GetEbsEncryptionByDefault",
                                "elasticfilesystem:DescribeFileSystems",
                                "eks:DescribeCluster",
                                "eks:ListClusters",
                                "elasticache:DescribeCacheClusters",
                                "elasticache:DescribeSnapshots",
                                "kinesis:DescribeStream",
                                "kinesis:ListStreams",
                                "memorydb:DescribeClusters",
                                "memorydb:DescribeSnapshots",
                                "qldb:DescribeLedger",
                                "qldb:ListLedgers",
                                "rds:DescribeDBClusters",
                                "rds:DescribeDBClusterSnapshots",
                                "rds:DescribeDBInstances",
                                "rds:DescribeDBSnapshots",
                                "resource-explorer-2:ListIndexes",
                                "resource-explorer-2:Search",
                                "s3:GetEncryptionConfiguration",
                                "s3:GetBucketLocation",
                                "s3:GetBucketPolicy",
                                "s3:ListAllMyBuckets",
                                "s3:ListBucket",
                                "sns:GetTopicAttributes",
                                "sns:ListTopics",
                                "timestream:DescribeEndpoints",
                                "timestream:ListDatabases",
                                "timestream:ListTables",
                                "tag:GetResources",
                                "iam:GenerateCredentialReport",
                                "iam:GetAccountPasswordPolicy",
                                "iam:GetCredentialReport",
                                "iam:GetLoginProfile",
                                "iam:GetRole",
                                "iam:ListAttachedRolePolicies",
                                "iam:ListMFADevices",
                                "iam:ListUsers",
                                "iam:ListRoles",
                                "aws-marketplace:ListEntities",
                                "organizations:DescribeOrganization",
                                "organizations:ListAccounts"
                              ],
                              "Resource": [
                                "*"
                              ],
                              "Effect": "Allow",
                              "Sid": "GCComplianceAllowAccess"
                            },
                            {
                              "Action": [
                                "s3:GetObjectRetention",
                                "s3:GetObjectVersionTagging",
                                "s3:GetObjectAttributes",
                                "s3:ListBucket",
                                "s3:GetObjectLegalHold",
                                "s3:GetObjectVersionAttributes",
                                "s3:GetObjectVersionTorrent",
                                "s3:GetObjectAcl",
                                "s3:GetObject",
                                "s3:GetObjectTorrent",
                                "s3:GetObjectVersionAcl",
                                "s3:GetObjectTagging",
                                "s3:GetObjectVersionForReplication",
                                "s3:GetObjectVersion"
                              ],
                              "Resource": [
                                "arn:${AWS::Partition}:s3:::${ClientEvidenceBucket}/*",
                                "arn:${AWS::Partition}:s3:::${ClientEvidenceBucket}",
                                "arn:${AWS::Partition}:s3:::${AWSConfigConformsBucketName}/*",
                                "arn:${AWS::Partition}:s3:::${AWSConfigConformsBucketName}"
                              ],
                              "Effect": "Allow",
                              "Sid": "GcComplianceAllowBucketAccess"
                            },
                            {
                              "Action": [
                                "s3: ListAllMyBuckets"
                              ],
                              "Resource": "*",
                              "Effect": "Allow",
                              "Sid": "GcComplianceAllowListBucketAccess"
                            }
                          ]
                        }]
                      }
                  }
                ] 
              }

  PermissionForEventsToInvokeLambda: 
    Type: AWS::Lambda::Permission
    Properties: 
      FunctionName: !Ref "CreateRoleLambda"
      Action: "lambda:InvokeFunction"
      Principal: "events.amazonaws.com"
      SourceArn: !GetAtt EventBridgeCreateAccount.Arn
